	/* 
	 * Function calculates the perimeter and uses it alongside the area to calculate circularity
	 * */
	private void circularity(){
		int[][] temp = new int[height][width]; //Copying contents of grid into temp
        for(int i=0; i<height; i++){
            for(int j=0; j<width; j++){
                temp[i][j]=grid[i][j];
            }
        }
		double circ;
		double sum = 1;
		boolean stillEdge = false;
		boolean stillOnes = false;
		Iterator<Integer> it = index.iterator();
		
		//Begins edge detection
		while(it.hasNext()){
			int ind = it.next();
			Item now = analysis.get(ind);
			for(int i = 0; i < temp.length; i++) { //calculating Perimeter
				for(int j = 0; j < temp[i].length; j++) {
					if(temp[i][j] == ind) {	//Index has been found
						stillOnes = true;
						
						//Moves around the perimeter, counting edges
						while(stillOnes) {
							temp[i][j] = -1;	//changes index to -1, to mark that it has been read
								if(j != (temp[i].length - 1) && onEdge(i, j+1) && temp[i][j+1] == ind) {	//looks at right pixel
									sum++;
									j++;
								}
								else if(i != (temp.length - 1) && onEdge(i+1, j) && temp[i+1][j] == ind) {	//looks at lower pixel
									sum++;
									i++;
								}
								else if(j != 0 && onEdge(i, j-1) && temp[i][j-1] == ind) {	//looks are left pixel
									sum++;
									j--;
								}
								else if(i != 0 && onEdge(i-1, j) && temp[i-1][j] == ind) {	//looks at upper pixel
									sum++;
									i--;
								}
								else if(i != (temp.length - 1) && j != (temp[i].length - 1) && onEdge(i+1, j+1) && temp[i+1][j+1] == ind) {	//Looks at down right pixel
									sum = sum + 1.4;
									i++;
									j++;
								}
								else if(i != (temp.length - 1) && j != 0 && onEdge(i+1, j-1) && temp[i+1][j-1] == ind) {	//looks at down left pixel
									sum = sum + 1.4;
									i++;
									j--;
								}
								else if(i != 0 && j != 0 && onEdge(i-1, j-1) && temp[i-1][j-1] == ind) {	//looks at up left pixel
									sum = sum + 1.4;
									i--;
									j--;
								}
								else if(i != 0 && j != (temp[i].length - 1) && onEdge(i-1, j+1) && temp[i-1][j+1] == ind) {	//looks at up right pixel
									sum = sum + 1.4;
									i--;
									j++;
								}
								else{	//no more edge pixels, leaves the loop
									stillOnes = false;
									stillEdge = true;
								}
						}
					}
					if(stillEdge)
						break;
				}
				if(stillEdge)
					break;
			}
			stillEdge = false;
			circ = Math.pow(sum, 2)/(now.getArea()); //calculating circularity
			now.setCirc(circ);
			sum = 1;
		}
	}
	
	/*
	 * Verifies that the pixel in question is on the edge
	 */
	private boolean onEdge(int x, int y){
			for(int i=x-1; i<= x+1; i++){
				for(int j=y-1; j<=y+1; j++){
						if(i >= 0 && i < height && j >= 0 && j < width){
							if(grid[i][j] == 0)	//If it has a surrounding zero, it is an edge pixel
								return true;
						}	
				}
			}
		return false;	//else not edge
	}
